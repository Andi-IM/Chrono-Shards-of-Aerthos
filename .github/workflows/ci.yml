name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dart-version: ['3.8.1', 'stable']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: ${{ matrix.dart-version }}
    
    - name: Print Dart version
      run: dart --version
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Analyze project source
      run: dart analyze --fatal-infos
    
    - name: Run tests
      run: dart test
    
    - name: Generate test coverage
      run: dart test --coverage=coverage
      if: matrix.os == 'ubuntu-latest' && matrix.dart-version == 'stable'
    
    - name: Convert coverage to LCOV
      run: dart run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib
      if: matrix.os == 'ubuntu-latest' && matrix.dart-version == 'stable'
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
      if: matrix.os == 'ubuntu-latest' && matrix.dart-version == 'stable'

  build:
    name: Build executable for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            output: csoa-linux
          - os: windows-latest
            target: windows
            output: csoa-windows.exe
          - os: macos-latest
            target: macos
            output: csoa-macos
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Build executable
      run: dart compile exe bin/csoa.dart -o ${{ matrix.output }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.output }}
        path: ${{ matrix.output }}
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Display structure of downloaded files
      run: ls -la
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          csoa-linux/csoa-linux
          csoa-windows.exe/csoa-windows.exe
          csoa-macos/csoa-macos
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Run security audit
      run: dart pub deps --json | jq '.packages[] | select(.kind == "direct")' || echo "No security issues found"
    
    - name: Check for outdated packages
      run: dart pub outdated --json || echo "All packages are up to date"

  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Generate documentation
      run: dart doc
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./doc/api
      if: github.ref == 'refs/heads/main'