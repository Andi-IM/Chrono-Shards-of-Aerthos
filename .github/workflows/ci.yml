name: CI/CD Pipeline

# ===========================================
# 🔐 Permissions untuk allow push (gh-pages)
# ===========================================
permissions:
  contents: write

# ===========================================
# 🚀 Trigger Kapan CI/CD Jalan
# ===========================================
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

# ===========================================
# 🧪 JOB: Test & Coverage
# ===========================================
jobs:
  test:
    name: Test on ${{ matrix.os }} / Dart ${{ matrix.dart-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dart-version: ['3.8.1', 'stable']

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - uses: dart-lang/setup-dart@v1
      with:
        sdk: ${{ matrix.dart-version }}

    - run: dart --version
      name: Print Dart Version

    - run: dart pub get
      name: Install Dependencies

    - run: dart format --output=none --set-exit-if-changed .
      name: Verify Formatting

    - run: dart analyze --fatal-infos
      name: Analyze Project Source

    - run: dart test
      name: Run Tests

    - run: dart test --coverage=coverage
      if: matrix.os == 'ubuntu-latest' && matrix.dart-version == 'stable'
      name: Generate Test Coverage

    - run: dart run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib
      if: matrix.os == 'ubuntu-latest' && matrix.dart-version == 'stable'
      name: Convert Coverage to LCOV

    - uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.dart-version == 'stable'
      with:
        file: coverage/lcov.info

# ===========================================
# 🛠️ JOB: Build Binary
# ===========================================
  build:
    name: Build Executable for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'release'

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            output: csoa-linux
          - os: windows-latest
            target: windows
            output: csoa-windows.exe
          - os: macos-latest
            target: macos
            output: csoa-macos

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - uses: dart-lang/setup-dart@v1
      with:
        sdk: stable

    - run: dart pub get
      name: Install Dependencies

    - run: dart compile exe bin/csoa.dart -o ${{ matrix.output }}
      name: Build Executable

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.output }}
        path: ${{ matrix.output }}
        retention-days: 30
      name: Upload Build Artifacts

# ===========================================
# 🚢 JOB: Release Assets (Upload ke GitHub Release)
# ===========================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - uses: actions/download-artifact@v3
      name: Download All Artifacts

    - run: ls -la
      name: Display Downloaded Files

    - uses: softprops/action-gh-release@v1
      with:
        files: |
          csoa-linux/csoa-linux
          csoa-windows.exe/csoa-windows.exe
          csoa-macos/csoa-macos
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Upload Release Assets

# ===========================================
# 🔍 JOB: Security & Dependency Audit
# ===========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - uses: dart-lang/setup-dart@v1
      with:
        sdk: stable

    - run: dart pub get
      name: Install Dependencies

    - run: dart pub deps --json | jq '.packages[] | select(.kind == "direct")' || echo "No security issues found"
      name: Security Audit

    - run: dart pub outdated --json || echo "All packages are up to date"
      name: Check Outdated Packages

# ===========================================
# 📄 JOB: Generate & Deploy Docs ke GitHub Pages
# ===========================================
  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - uses: dart-lang/setup-dart@v1
      with:
        sdk: stable

    - run: dart pub get
      name: Install Dependencies

    - run: dart doc
      name: Generate Documentation

    - uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./doc/api
      if: github.ref == 'refs/heads/main'
      name: Deploy to GitHub Pages
